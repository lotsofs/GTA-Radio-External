<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="radioButtonWinamp.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="radioButtonWinamp.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <data name="groupBox3.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="checkBox7.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <data name="radioButtonDirect.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <data name="checkBox1.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <data name="radioButtonVolume.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <data name="radioButtonPause.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <data name="radioButtonMute.ToolTip" xml:space="preserve">
    <value>The action to take when the radio is supposed to turn on/off. 
Volume = Volume up/down multimedia key presses are sent repeatedly until the volume is correct. When playing music at high volumes, this can take up to a couple seconds. 
Toggling 'Quick Volume' will speed this process, but volume restoration is less precise. 
Toggling 'Ignore Modifiers' will ignore modifier keys, which will cause systemwide volume change when holding modifier keys (shift, alt, ctrl) when transitioning radio status. Enable if you have a virtual audio cable setup where system volume doesn't matter.
  Note: Certain programs may need to have the media keys bound manually.
Mute = Mute/unmute presses are sent, but this is not supported by some programs.
Play/pause = Play/pause is sent. Unlike the true GTA experience, the music is paused and resumed and will not continue playing silently in the background. Note: Pausing/Playing manually may be needed to prevent inverted radio playing.
</value>
  </data>
  <data name="groupBox4.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <data name="checkBoxF.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <data name="checkBoxE.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <data name="checkBoxD.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <data name="checkBoxC.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <data name="checkBoxB.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <data name="checkBoxA.ToolTip" xml:space="preserve">
    <value>Select when the music should be playing. 
Emergency = music player will be playing when the game is playing Emergency Radio (Firetrucks, Ambulances, Police Cars)
Radio = music player will be playing when the game is on a regular radio station (Both music radio &amp; talk radio)
Interiors = music player will be playing in interiors that have radio playing inside them (Does not include interiors with their own special music, such as Malibu or Caligula)
Menu = music will play in pause menu (disregards whether it was playing to begin with)
Kaufman = music will play in Kaufman Cab after Cabmaggedon
Announcer = music will play during bridge repair/storm warning announcements on the radio</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAABMLAAATCwAAAAAAAAAA
        AAD///8A////AP//////////////////////////////////////////////////////////////////
        /wD///8A////AP////8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP//////////AP////8AAAD/2bMw/9mzMP/ZszD/2bMw/9mzMP/ZszD/2bMw/9mzMP/ZszD/2bMw/9mz
        MP/ZszD/AAAA////////////AAAA/9mzMP/ZszD/AAAA/wAAAP8AAAD/2bMw/9mzMP8AAAD/AAAA/wAA
        AP8AAAD/2bMw/wAAAP///////////wAAAP/ZszD/AAAA/6enp//AwMD/p6en/wAAAP/ZszD/2bMw/9mz
        MP/ZszD/2bMw/9mzMP8AAAD///////////8AAAD/2bMw/wAAAP/AwMD/p6en/8DAwP8AAAD/2bMw/wAA
        AP8AAAD/AAAA/wAAAP/ZszD/AAAA////////////AAAA/9mzMP8AAAD/p6en/8DAwP+np6f/AAAA/9mz
        MP/ZszD/2bMw/9mzMP/ZszD/2bMw/wAAAP///////////wAAAP/ZszD/2bMw/wAAAP8AAAD/AAAA/9mz
        MP/ZszD/AAAA/wAAAP8AAAD/AAAA/9mzMP8AAAD///////////8AAAD/2bMw/9mzMP/ZszD/2bMw/9mz
        MP/ZszD/2bMw/9mzMP/ZszD/2bMw/9mzMP/ZszD/AAAA//////////8A/////wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA//////////8A////AP///wD/////AAAA////
        //8AAAD/////////////////////////////////AAAA//////////8A////AP///wD///8A/////wAA
        AP//////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP//////////AP///wD///8A////AP//
        //8AAAD/////////////////////////////////////////////////////AP///wD///8A////AP//
        /wD///////////////////8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A/////wAAAP//////////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///////////////////wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8AwAMAAIABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAEAAMADAADAAwAAwAcAAMf/
        AADH/wAAx/8AAA==
</value>
  </data>
</root>